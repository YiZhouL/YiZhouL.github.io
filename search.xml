<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git内部设计</title>
      <link href="/YiZhouL.github.io/2020/11/09/git_design/"/>
      <url>/YiZhouL.github.io/2020/11/09/git_design/</url>
      
        <content type="html"><![CDATA[<p>git作为当前最流行的版本控制系统(CVS)不管是出于学习或工作目的都是非常值得学习的。本文将着重从git内部工作原理出发记录自己的学习心得，了解git的内部原理可以迅速帮助我们真正使用git，而不仅仅停留在命令表面。</p><h4 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h4><p>版本控制系统在平时学习中其实经常就打交道，就拿毕业论文来说，基本上我们每修改一次，都会复制然后改个文件名标记一下，这就是一次完整的版本控制过程。</p><p>CVS本质上就是做这样的工作，但是它提供了一种高效的方式。想一想，当你的项目文件（或者你想跟踪的任何文件）很少或修改并不频繁时，完全可以手动控制，但是一旦你的需要修改的文件非常多，那么手动管理就会变得很困难而且容易出错，而CVS使用很多方法保证了每一次所做的修改都能做到精确控制。</p><p>当作为一个开发者时，使用CVS是非常必要的。CVS可以帮助开发者了解项目的开发过程，了解每一个版本的修订历史，当出现问题时可以进行版本回溯；如今几乎所有的工程项目都是以团队为单位，而CVS的出现极大提高了团队协作开发效率、降低了管理难度。</p><h4 id="git和gitHub关系"><a href="#git和gitHub关系" class="headerlink" title="git和gitHub关系"></a>git和gitHub关系</h4><p><strong>官方定义</strong></p><p><strong>Git</strong> is a free and open source distributed <strong><em>version control system</em></strong> designed to handle everything from small to very large projects with speed and efficiency.</p><p><strong>GitHub</strong> is a <strong><em>development platform</em></strong> inspired by the way you work. From open source to business, you can host and <strong><em>review code</em></strong>, <strong><em>manage projects</em></strong>, and <strong><em>build software alongside 50 million developers</em></strong>.</p><p><strong>Git帮助开发者管理项目，GitHub使用git帮助团队管理项目。</strong></p><h4 id="git特点"><a href="#git特点" class="headerlink" title="git特点"></a>git特点</h4><ul><li><strong>速度（即高效）</strong></li><li><strong>设计简单</strong></li><li><strong>支持超大规模项目</strong></li><li><strong>非线性开发模式（允许上千个并行开发的分支）</strong></li><li><strong>完全分布式</strong></li></ul><h4 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h4><h5 id="传统CVS的存储方式"><a href="#传统CVS的存储方式" class="headerlink" title="传统CVS的存储方式"></a>传统CVS的存储方式</h5><p>大多cvs记录每个版本之间的差异，某一版本的完整文件由初始版本叠加这些差异即可得。</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/18333fig0104-tn.png" alt="18333fig0104-tn"></p><h5 id="git的存储方式"><a href="#git的存储方式" class="headerlink" title="git的存储方式"></a>git的存储方式</h5><p>git采用了简单的记录方式，当某个文件发生改变时，直接存储文件的快照（看作为新文件）而非差异</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/18333fig0105-tn.png" alt="img"></p><p>每个文件有唯一的索引（采用某些hash算法）</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/index.PNG" alt="index"></p><p>当某个新版本的文件没有改变时，并不会创建一个新文件，而是使用上个版本的index</p><p>只要知道某个版本的所有index即可获取该版本完整内容</p><p>git自下而上大量采用了index这种思想，git中的操作对象更像是index，而不是文件本身</p><h4 id="标准工作流"><a href="#标准工作流" class="headerlink" title="标准工作流"></a>标准工作流</h4><p><img src="/YiZhouL.github.io/2020/11/09/git_design/flow.png" alt="flow"></p><p>git划分了以下三个文件区域</p><ul><li>工作目录：修改文件</li><li>暂存区：保存工作目录中文件的最新索引</li><li>git仓库：将暂存区的索引作为一次新版本进行提交</li></ul><p>因此，git中的文件具有三种状态，对应三个工作区域</p><ul><li>已修改</li><li>已暂存</li><li>已提交</li></ul><p>git中文件的状态标准流转一般如上图所示，但是git也提供方法用于逆转操作</p><h4 id="git仓库的构建"><a href="#git仓库的构建" class="headerlink" title="git仓库的构建"></a>git仓库的构建</h4><h5 id="blob对象"><a href="#blob对象" class="headerlink" title="blob对象"></a>blob对象</h5><p>在git中，一个普通文件称为blob对象，具有唯一的index</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/index.PNG" alt="index"></p><h5 id="tree对象"><a href="#tree对象" class="headerlink" title="tree对象"></a>tree对象</h5><p>文件夹在git中表示为tree对象，文件夹是一个特殊的文件，包含其他文件的索引，本身也具有唯一index</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/tree.PNG" alt="tree"></p><h5 id="暂存区"><a href="#暂存区" class="headerlink" title="暂存区"></a>暂存区</h5><p>暂存区本质上是一个索引集，而索引集想一想是不是一个tree对象。因此要明白，提交一个新版本时，提交的是一个tree对象，该tree对象包含了工作目录中所有的文件，并把它们构造成一个tree对象，是一个TOP tree对象。</p><h5 id="commit对象"><a href="#commit对象" class="headerlink" title="commit对象"></a>commit对象</h5><p>提交一个tree对象的结果就是一个commit对象。</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/commit.PNG" alt="commit"></p><p>commit对象是一个特殊的文件，包含了提交tree对象的index和一些提交信息。</p><p>如果知道一个commit的index，那么就可以获取完整的文件内容。</p><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ol><li>暂存区并不是实时对应工作目录的最新内容，只有暂存后才会更新暂存区</li><li>当提交完暂存区后，暂存区并不会清空；暂存区的变化与提交无关</li><li>文件（或对象）的索引只与内容有关，与文件名无关</li><li>构建快照和生成索引发生在暂存过程中；验证数据的完整性（通过再次计算文件的索引判断和已有索引是否相同）发生在提交过程中</li></ol><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ol><li><p>git如何感知文件名的变化</p><p>git中的tree对象中不仅仅存储着包含的index，还包含对应文件的名字</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/file_name.PNG" alt="file_name"></p><p>文件名的变化发生在所属的tree对象，这时候暂存时将会创建一个tree对象的快照</p></li><li><p>git如何控制文件的权限</p><p>同文件名一样，tree对象还包含每个文件的权限，当权限发生变化时，将会创建一个tree对象的快照；但是一般不对权限做控制，如果需要，要做对应的设置</p></li><li><p>git如何回溯版本</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/commit_manage.PNG" alt="commit_manage"></p><p>在commit中，还会保存上一个commit的index，通过这样简单的方式就可以将所有的commit链接起来，回溯就成了一个链表索引的动作</p></li></ol><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><p>git创建一个分支是非常简单的，几乎是瞬间完成，git中的分支模型可以称得上是“大杀器”。</p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>现在，我们只需要知道一个commit的index即可完全知道所有的历史提交，但是index是一串无意义的字符串(由sha256计算)，不好记忆且对于开发者来说没有意义。</p><p><strong>引用</strong>实质上是一个commit的别名</p><p>在git中引用使用一个简单的文件存储，文件内容为commit index，而文件名为引用名。<br><img src="/YiZhouL.github.io/2020/11/09/git_design/ref1.png" alt="ref"></p><h5 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h5><p>分支是引用概念的延伸。随着项目版本不断迭代，每一次commit将会把这次的index链接到上次的commit index。</p><p><strong>分支</strong>本质上是一个<strong>index会更新的引用</strong>，而不是某个commit index不变的引用。分支所指向的index永远是当前最新的commit index。</p><h5 id="默认分支"><a href="#默认分支" class="headerlink" title="默认分支"></a>默认分支</h5><p>在git中，总是存在一个默认分支，名为master（从2020/10/1更名为main，不过相关命令貌似还是master），当你没做过任何有关分支切换的操作，所有的修改、提交都在该分支。</p><h5 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h5><p>从git来看，多分支是多个index可变的引用，所有这些分支都可以进行提交。</p><p>从项目管理来看，不同的分支流则代表不同的任务流；可能是新功能、BUG修复等等。</p><h5 id="HEAD文件"><a href="#HEAD文件" class="headerlink" title="HEAD文件"></a>HEAD文件</h5><p>当提交一个commit时，肯定是在当前工作的分支上进行的，git使用HEAD文件标记当前的工作分支。<br>如同引用是commit index别名一样，HEAD是分支的别名，内容和分支一样是可变的。</p><p><img src="/YiZhouL.github.io/2020/11/09/git_design/branch1.png" alt="branch1"></p><p>每一次分支切换时，HEAD所指向的分支则会改变。</p><h4 id="Tag标签"><a href="#Tag标签" class="headerlink" title="Tag标签"></a>Tag标签</h4><p>tag如同名字一样，用来给git的commit对象打上标签。</p><p>git存在两种标签，轻量标签（lightweight tag）和附注标签（annotated tag）；这两种标签差别仅仅就在于<strong>实现方式不同</strong>，前者是后者的简单实现，因此功能比后者要少</p><h5 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h5><p>项目总是会有很多版本，团队几乎都会对版本进行一个简单的版本号标记，在此情景下，打上轻量标签非常合适。</p><p>轻量标签是一个不变的引用，引用名即为版本号，非常简单的实现。</p><h5 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h5><p>有时候，团队可能不仅要标记一个版本号，还会对该版本添加一些额外的信息，可能是某些功能信息等等；这时候轻量标签则实现不了了。</p><p>附注标签创建了一个tag对象，该对象含有被打标签的commit index和额外信息。<br><img src="/YiZhouL.github.io/2020/11/09/git_design/tag.png" alt="tag"></p><p>轻量标签指向commit对象，附注标签指向tag对象，这就是所有的不同，轻量标签完全可以用附注标签代替，但没有必要。</p><p>需要注意的是附注标签中的index可以不是commit index，也可以是blob对象、tree对象。</p><h4 id="git中的数据对象"><a href="#git中的数据对象" class="headerlink" title="git中的数据对象"></a>git中的数据对象</h4><p>从以上两部分可以知道，git中有四种数据对象，实际上所有的git操作都是操作这四种对象</p><ul><li>blob对象</li><li>tree对象</li><li>commit对象</li><li>tag对象</li></ul><p>所有对象都有唯一的index，git操作文件与其不如说是操作这些index，git将文件通过这些index巧妙简单的组织起来实现了各种功能。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>git是一个极其复杂的软件，但核心设计思想是很简单的；只有了解了这些设计的理念才能在平时的git操作中遇到任何问题都有解决的思路。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://git-scm.com/book">Git book</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Win10 + Ubuntu20.04安装注意事项</title>
      <link href="/YiZhouL.github.io/2020/11/09/Win10-Ubuntu20-04%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/YiZhouL.github.io/2020/11/09/Win10-Ubuntu20-04%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="烧镜像"><a href="#烧镜像" class="headerlink" title="烧镜像"></a>烧镜像</h4><p>烧镜像使用<a href="http://rufus.ie/">rufus</a>, windows和ubuntu镜像均采用uefi启动模式和GPT分区</p><ol><li><p>Windows分区时确保分区模式为 <strong>GPT</strong></p><ol><li><strong>shift+F10</strong> 打开diskpart</li><li><strong>list disk</strong></li><li><strong>select disk 0/1/2/3</strong></li><li><strong>convert GPT</strong></li></ol></li><li><p>Ubuntu安装</p><ol><li>采用最小安装，没设置源下载太慢了</li><li>启动器记得设置为 <strong>/boot所在分区</strong></li></ol></li></ol><h4 id="Ubuntu安装后设置"><a href="#Ubuntu安装后设置" class="headerlink" title="Ubuntu安装后设置"></a>Ubuntu安装后设置</h4><ol><li><p>系统换源<br> 将以下内容替换已有 <strong>/etc/apt/sources.list</strong> (源文件备份哦)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">    deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">    deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">    deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">    deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">    deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">    deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">    deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">    deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">    deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></li><li><p>安装<a href="https://pinyin.sogou.com/linux/?r=pinyin">搜狗输入法</a><br> 装完在 <strong>fcitx Configuration</strong> 中设置:</p><p> <img src="/YiZhouL.github.io/2020/11/09/Win10-Ubuntu20-04%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/system1.png"></p></li></ol><h4 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h4><ul><li><a href="https://msdn.itellyou.cn/">Windows原装镜像</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">Ubuntu镜像</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统安装 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用conda管理python环境</title>
      <link href="/YiZhouL.github.io/2020/11/08/%E4%BD%BF%E7%94%A8conda%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83/"/>
      <url>/YiZhouL.github.io/2020/11/08/%E4%BD%BF%E7%94%A8conda%E7%AE%A1%E7%90%86python%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/">下载Miniconda</a>，不要去官网下太慢了</p><h4 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h4><p>将以下内容写入 <strong>~/.condarc</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">        - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;</span><br><span class="line">        - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;</span><br><span class="line">        - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;</span><br><span class="line">        - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;</span><br><span class="line">        show_channel_urls: true</span><br></pre></td></tr></table></figure><h4 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create env -n env_name python&#x3D;python_version</span><br></pre></td></tr></table></figure><h4 id="切换-退出环境"><a href="#切换-退出环境" class="headerlink" title="切换/退出环境"></a>切换/退出环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate&#x2F;deactivate env_name</span><br></pre></td></tr></table></figure><h4 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n env_name</span><br></pre></td></tr></table></figure><h4 id="列出环境"><a href="#列出环境" class="headerlink" title="列出环境"></a>列出环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><h4 id="导出环境"><a href="#导出环境" class="headerlink" title="导出环境"></a>导出环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env export &gt; environment.yaml</span><br></pre></td></tr></table></figure><h4 id="从导出环境创建"><a href="#从导出环境创建" class="headerlink" title="从导出环境创建"></a>从导出环境创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n env_name -f environment.yaml</span><br></pre></td></tr></table></figure><h3 id="使用pip而不是conda管理python包"><a href="#使用pip而不是conda管理python包" class="headerlink" title="使用pip而不是conda管理python包"></a>使用pip而不是conda管理python包</h3><h4 id="配置pip源"><a href="#配置pip源" class="headerlink" title="配置pip源"></a>配置pip源</h4><p>将以下内容写入**~/.pip/pip.conf**</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">    index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br><span class="line">    trusted-host &#x3D; mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h4 id="导出pip安装的包"><a href="#导出pip安装的包" class="headerlink" title="导出pip安装的包"></a>导出pip安装的包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h4 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install package_name [-i index-url trusted-host host_name]</span><br></pre></td></tr></table></figure><h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall package_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
